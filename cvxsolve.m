% Produced by CVXGEN, 2014-06-19 05:28:51 -0400.
% CVXGEN is Copyright (C) 2006-2012 Jacob Mattingley, jem@cvxgen.com.
% The code in this file is Copyright (C) 2006-2012 Jacob Mattingley.
% CVXGEN, or solvers produced by CVXGEN, cannot be used for commercial
% applications without prior written permission from Jacob Mattingley.

% Filename: cvxsolve.m.
% Description: Solution file, via cvx, for use with sample.m.
function [vars, status] = cvxsolve(params, settings)
A = params.A;
B = params.B;
Ed = params.Ed;
Ef = params.Ef;
Ff = params.Ff;
Fu = params.Fu;
Fus = params.Fus;
Fx = params.Fx;
Fxs = params.Fxs;
Q = params.Q;
Q_final = params.Q_final;
R = params.R;
d = params.d;
ef = params.ef;
f = params.f;
ff = params.ff;
fs = params.fs;
x_0 = params.x_0;
xt = params.xt;
cvx_begin
  % Caution: automatically generated by cvxgen. May be incorrect.
  variable u_0;
  variable x_1(3, 1);
  variable u_1;
  variable x_2(3, 1);
  variable u_2;
  variable x_3(3, 1);
  variable u_3;
  variable x_4(3, 1);
  variable u_4;
  variable x_5(3, 1);
  variable u_5;
  variable x_6(3, 1);
  variable u_6;
  variable x_7(3, 1);
  variable u_7;
  variable x_8(3, 1);
  variable u_8;
  variable x_9(3, 1);
  variable u_9;
  variable x_10(3, 1);

  minimize(quad_form(x_0 - xt, Q) + quad_form(u_0, R) + sum(pos(Fxs*x_0 + Fus*u_0 - fs)) + quad_form(x_1 - xt, Q) + quad_form(u_1, R) + sum(pos(Fxs*x_1 + Fus*u_1 - fs)) + quad_form(x_2 - xt, Q) + quad_form(u_2, R) + sum(pos(Fxs*x_2 + Fus*u_2 - fs)) + quad_form(x_3 - xt, Q) + quad_form(u_3, R) + sum(pos(Fxs*x_3 + Fus*u_3 - fs)) + quad_form(x_4 - xt, Q) + quad_form(u_4, R) + sum(pos(Fxs*x_4 + Fus*u_4 - fs)) + quad_form(x_5 - xt, Q) + quad_form(u_5, R) + sum(pos(Fxs*x_5 + Fus*u_5 - fs)) + quad_form(x_6 - xt, Q) + quad_form(u_6, R) + sum(pos(Fxs*x_6 + Fus*u_6 - fs)) + quad_form(x_7 - xt, Q) + quad_form(u_7, R) + sum(pos(Fxs*x_7 + Fus*u_7 - fs)) + quad_form(x_8 - xt, Q) + quad_form(u_8, R) + sum(pos(Fxs*x_8 + Fus*u_8 - fs)) + quad_form(x_9 - xt, Q) + quad_form(u_9, R) + sum(pos(Fxs*x_9 + Fus*u_9 - fs)) + quad_form(x_10 - xt, Q_final));
  subject to
    x_1 == A*x_0 + B*u_0 + d;
    x_2 == A*x_1 + B*u_1 + d;
    x_3 == A*x_2 + B*u_2 + d;
    x_4 == A*x_3 + B*u_3 + d;
    x_5 == A*x_4 + B*u_4 + d;
    x_6 == A*x_5 + B*u_5 + d;
    x_7 == A*x_6 + B*u_6 + d;
    x_8 == A*x_7 + B*u_7 + d;
    x_9 == A*x_8 + B*u_8 + d;
    x_10 == A*x_9 + B*u_9 + d;
    Fx*x_0 + Fu*u_0 <= f;
    Fx*x_1 + Fu*u_1 <= f;
    Fx*x_2 + Fu*u_2 <= f;
    Fx*x_3 + Fu*u_3 <= f;
    Fx*x_4 + Fu*u_4 <= f;
    Fx*x_5 + Fu*u_5 <= f;
    Fx*x_6 + Fu*u_6 <= f;
    Fx*x_7 + Fu*u_7 <= f;
    Fx*x_8 + Fu*u_8 <= f;
    Fx*x_9 + Fu*u_9 <= f;
    Ff*x_10 <= ff;
    Ef*x_10 + Ed*d == ef;
cvx_end
vars.u_0 = u_0;
vars.u_1 = u_1;
vars.u{1} = u_1;
vars.u_2 = u_2;
vars.u{2} = u_2;
vars.u_3 = u_3;
vars.u{3} = u_3;
vars.u_4 = u_4;
vars.u{4} = u_4;
vars.u_5 = u_5;
vars.u{5} = u_5;
vars.u_6 = u_6;
vars.u{6} = u_6;
vars.u_7 = u_7;
vars.u{7} = u_7;
vars.u_8 = u_8;
vars.u{8} = u_8;
vars.u_9 = u_9;
vars.u{9} = u_9;
vars.x_1 = x_1;
vars.x{1} = x_1;
vars.x_2 = x_2;
vars.x{2} = x_2;
vars.x_3 = x_3;
vars.x{3} = x_3;
vars.x_4 = x_4;
vars.x{4} = x_4;
vars.x_5 = x_5;
vars.x{5} = x_5;
vars.x_6 = x_6;
vars.x{6} = x_6;
vars.x_7 = x_7;
vars.x{7} = x_7;
vars.x_8 = x_8;
vars.x{8} = x_8;
vars.x_9 = x_9;
vars.x{9} = x_9;
vars.x_10 = x_10;
vars.x{10} = x_10;
status.cvx_status = cvx_status;
% Provide a drop-in replacement for csolve.
status.optval = cvx_optval;
status.converged = strcmp(cvx_status, 'Solved');
